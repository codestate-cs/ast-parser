name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Check coverage thresholds
      run: |
        echo "üîç Checking coverage thresholds..."
        npm test -- --coverage --watchAll=false --passWithNoTests --silent
        
        # Parse coverage and check thresholds
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "üìä Coverage Summary:"
          cat coverage/coverage-summary.json | jq '.total'
          
          # Check if all thresholds are met
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          echo "üìà Coverage Results:"
          echo "  Statements: ${STATEMENTS}% (threshold: 90%)"
          echo "  Branches: ${BRANCHES}% (threshold: 90%)"
          echo "  Functions: ${FUNCTIONS}% (threshold: 90%)"
          echo "  Lines: ${LINES}% (threshold: 90%)"
          
          # Check thresholds
          if (( $(echo "$STATEMENTS >= 90" | bc -l) )) && \
             (( $(echo "$BRANCHES >= 90" | bc -l) )) && \
             (( $(echo "$FUNCTIONS >= 90" | bc -l) )) && \
             (( $(echo "$LINES >= 90" | bc -l) )); then
            echo "‚úÖ All coverage thresholds met!"
          else
            echo "‚ùå Coverage thresholds not met!"
            echo "Please improve test coverage before merging."
            exit 1
          fi
        else
          echo "‚ùå Coverage report not found!"
          exit 1
        fi
        
    - name: Comment PR with coverage results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const { statements, branches, functions, lines } = coverage.total;
              
              const comment = `## üìä Coverage Report
              
              | Metric | Coverage | Threshold | Status |
              |--------|----------|-----------|--------|
              | Statements | ${statements.pct.toFixed(2)}% | 90% | ${statements.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              | Branches | ${branches.pct.toFixed(2)}% | 90% | ${branches.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              | Functions | ${functions.pct.toFixed(2)}% | 90% | ${functions.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              | Lines | ${lines.pct.toFixed(2)}% | 90% | ${lines.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              
              ${statements.pct >= 90 && branches.pct >= 90 && functions.pct >= 90 && lines.pct >= 90 
                ? 'üéâ **All coverage thresholds met!** This PR is ready for review.' 
                : '‚ö†Ô∏è **Coverage thresholds not met.** Please improve test coverage before merging.'}`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('‚úÖ Coverage comment posted successfully');
            } else {
              console.log('‚ö†Ô∏è Coverage report not found, skipping comment');
            }
          } catch (error) {
            console.log('‚ùå Could not create coverage comment:', error.message);
            console.log('Error details:', error);
            
            // Try to post a simple comment indicating the issue
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ö†Ô∏è **Coverage Report Unavailable**\n\nCould not generate coverage report due to: ${error.message}\n\nPlease check the workflow logs for more details.`
              });
            } catch (fallbackError) {
              console.log('‚ùå Could not post fallback comment either:', fallbackError.message);
            }
          }
          
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: pull-request
        name: codecov-pr
        fail_ci_if_error: false
        verbose: true

  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check build artifacts
      run: |
        if [ -d "dist" ]; then
          echo "‚úÖ Build successful - dist directory created"
          ls -la dist/
        else
          echo "‚ùå Build failed - dist directory not found"
          exit 1
        fi
