name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      continue-on-error: true
      
    - name: Run type checking
      run: npm run type-check
      continue-on-error: true
      
    - name: Run tests with coverage and check thresholds
      run: |
        echo "üß™ Running tests with coverage..."
        npm test -- --coverage --watchAll=false
        
        echo "üîç Checking coverage thresholds..."
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "üìä Coverage Summary:"
          cat coverage/coverage-summary.json | jq '.total'
          
          # Check if all thresholds are met
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          echo "üìà Coverage Results:"
          echo "  Statements: ${STATEMENTS}% (threshold: 90%)"
          echo "  Branches: ${BRANCHES}% (threshold: 90%)"
          echo "  Functions: ${FUNCTIONS}% (threshold: 90%)"
          echo "  Lines: ${LINES}% (threshold: 90%)"
          
          # Check thresholds
          if (( $(echo "$STATEMENTS >= 90" | bc -l) )) && \
             (( $(echo "$BRANCHES >= 90" | bc -l) )) && \
             (( $(echo "$FUNCTIONS >= 90" | bc -l) )) && \
             (( $(echo "$LINES >= 90" | bc -l) )); then
            echo "‚úÖ All coverage thresholds met!"
          else
            echo "‚ùå Coverage thresholds not met!"
            exit 1
          fi
        else
          echo "‚ùå Coverage report not found!"
          exit 1
        fi
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
      continue-on-error: true

  build-and-publish:
    needs: test-and-coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      continue-on-error: true

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for known vulnerabilities
      run: npm audit --audit-level=high
      continue-on-error: true
